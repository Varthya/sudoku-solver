//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
// UNASSIGNED is used for empty cells in sudoku grid 
#define UNASSIGNED 0  

// N is used for the size of Sudoku grid.  
// Size will be NxN  
#define N 9  


// } Driver Code Ends
class Solution 
{
    public:
    //Function to find a solved Sudoku.
    bool check(int i,int j,int num,int grid[N][N])
    {
        for(int x=0;x<9;x++)
        {
            if(grid[i][x]==num)return false;
            if(grid[x][j]==num)return false;
        }
        int start_row=i-i%3;
        int start_col=j-j%3;
        for(int a=start_row;a<start_row+3;a++)
        {
            for(int b=start_col;b<start_col+3;b++)
            {
                if(grid[a][b]==num)return false;
            }
        }
        return true;
    }
    bool SolveSudoku(int grid[N][N])  
    { 
        // Your code here
          int i,j;
         int flag=0;
          for(i=0;i<N;i++)
          {
              for(j=0;j<N;j++)
              {
                  if(grid[i][j]==0)
                  {
                      flag=1;
                      break;
                  }
              }
              if(flag)
                break;
          }
          if(flag==0)return true;
          for(int num=1;num<=9;num++)
          {
             if(check(i,j,num,grid))
             {
                 grid[i][j]=num;
                 if(SolveSudoku(grid))return true;
                  grid[i][j]=0;
             }
          }
          return false;
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
        for(int i=0;i<N;i++)
         {
             for(int j=0;j<N;j++)
             {
                 cout<<grid[i][j]<<" ";
             }
         }
    }
};

//{ Driver Code Starts.

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int grid[N][N];
		
		for(int i=0;i<9;i++)
		    for(int j=0;j<9;j++)
		        cin>>grid[i][j];
		        
		Solution ob;
		
		if (ob.SolveSudoku(grid) == true)  
            ob.printGrid(grid);  
        else
            cout << "No solution exists";  
        
        cout<<endl;
	}
	
	return 0;
}
// } Driver Code Ends
